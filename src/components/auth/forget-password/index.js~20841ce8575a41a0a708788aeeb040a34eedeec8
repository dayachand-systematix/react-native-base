/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import { View, Text, TextInput, TouchableHighlight, StyleSheet, AsyncStorage, ImageBackground, ScrollView, Image } from 'react-native';
import { Container, Header, Left, Body, Right, Icon, Title, Button, Radio, ListItem, Picker, Content, CheckBox } from 'native-base';
import { connect } from 'react-redux';
import { ValidationComponent, Toast } from '../../../helper';
import styles from '../../../assets/styles';
import { HeaderComponent, InputBox, Loader } from '../../common'
import { forgotPasswordAPI } from '../../../actions/Auth';


class ForgetPassword extends ValidationComponent {

    constructor(props) {
        super(props);
        this.state = {
            email: '',
            isSubmitted: false,
            loading: false,
            showToast: false,
            visible: false,
            toastBgColor: 'green'
        };
    }

    /**
   * @method hideToast
   * @description function to hide toast
   */
    hideToast = () => {
        setTimeout(() => this.setState({
            visible: false
        }), 2000); /** hide toast after 2s */
    }

    /**
     * @method checkValidation
     * @description called to check validations
     */
    checkValidation = () => {
        /* Call ValidationComponent validate method */
        this.validate({
            email: {
                required: true,
                email: true,
            }
        });
        this.setState({ error: true });
    }

    /**
     * @method onInputValueChanged
     * @description called when input field value changes
     */
    onInputValueChanged = (key) => (value) => {
        this.changeValue(key, value);
    }

    /**
     * @method onValueChanged
     * @description called
     */
    onValueChanged = (key, value) => () => {
        this.changeValue(key, value);
    }

    /**
     * @method changeValue
     * @description called
     */
    changeValue = (key, value) => {
        const state = this.state;
        state[key] = value;
        this.setState(state, () => {
            if (this.state.isSubmitted) {
                this.checkValidation();
            }
        })
    }

    /**
     * @method onPressConfirmButton
     * @description Call forgot password api
     */

    onPressConfirmButton = () => {
        const { email } = this.state
        this.setState({ isSubmitted: true });
        this.checkValidation();
        let requestData = {
            email: email,
        }

        if (this.getErrorMessages()) {

        } else {
            this.props.forgotPasswordAPI(requestData, (res) => {
                let status = res.data.success;
                console.log(res);
                if (res.data.success != true) {
                    Toast.showToast('Invalid email', 'danger')
                } else {
                    Toast.showToast('We have sent an email with a temporary password', 'success');
                    this.props.navigation.navigate('Login');
                }
            })
        }
    }


    /**
     * @method render
     * @description Renders component
     */
    render() {
        return (
            <Container>
                {this.props.loading && (
                    <Loader />
                )
                }
                <ImageBackground source={require('../../../assets/images/login-bg.jpg')} style={innerStyle.pageBg}>
                    <ScrollView>
                        <HeaderComponent
                            title='Fotgot Password?'
                            leftButton='back'
                            isTransparent='true'
                        />
                        <View style={innerStyle.logoWrapper}>
                            <Image source={require('../../../assets/images/Logo-login.png')} style={innerStyle.pageLogo} />
                        </View>
                        <View style={innerStyle.LoginWrapper}>
                            <View style={innerStyle.LoginWrapperInner}>

                                <InputBox label="Email Address"
                                    mandatory="true"
                                    placeholder="Email Address"
                                    onChangeText={this.onInputValueChanged('email')}
                                    maxLength={30}
                                    iconName="email"
                                    IconSize={14}
                                />
                                {this.isFieldInError('email') && <Text style={styles.errorTextStyle}>{this.getErrorsInField('email')}</Text>}
                            </View>
                            <View style={innerStyle.btnRow}>
                                <Button success block style={[styles.button, styles.buttonFull, innerStyle.buttonShadow]}
                                    onPress={this.onPressConfirmButton}
                                >
                                    <Text style={styles.buttonTextAuth}>Confirm</Text>
                                </Button>
                            </View>
                        </View>
                    </ScrollView>
                </ImageBackground>
            </Container>
        );
    }
}

const innerStyle = StyleSheet.create({
    pageBg: {
        flex: 1,
        resizeMode: 'cover', // or 'stretch'
    },

    pageLogo: {
        width: 250, height: 250
    },
    logoWrapper: {
        marginTop: -20, alignItems: 'center', position: 'relative', zIndex: 2
    },
    socialWrapper: {
        flexDirection: 'row', justifyContent: 'center', alignItems: 'center'
    },
    socialIcon: {
        width: 100, height: 100
    },
    middleIcon: {
        marginLeft: -30, marginRight: -30
    },
    LoginWrapper: {
        paddingLeft: 30,
        paddingRight: 30,
        backgroundColor: 'transparent',
        marginTop: -140,
    },
    LoginWrapperInner: {
        backgroundColor: '#fff',
        borderRadius: 20,
        padding: 20,
        paddingTop: 140,
        position: 'relative',
        zIndex: 9,
        paddingBottom: 50,
        shadowColor: '#000000',
        shadowOffset: {
            width: 0,
            height: 3
        },
        shadowRadius: 5,
        shadowOpacity: 0.1,
        elevation: 2,
    },
    buttonShadow: {
        shadowColor: '#fac700', elevation: 3
    },
    btnRow: {
        margin: 20, marginTop: -30, paddingLeft: 10, paddingRight: 10, position: 'relative', zIndex: 99, paddingBottom: 10, position: 'relative', shadowColor: '#000000',
        shadowOffset: {
            width: 0,
            height: 3
        },
        shadowRadius: 5,
        shadowOpacity: 0.1,
        elevation: 2,
    },
    InputValue: {
        marginTop: 0, color: '#2C3138',
    },
    itemLabel: {
        borderBottomColor: '#738A9D'
    },
    InputLabel: {
        fontFamily: fontRegular, fontSize: 19, color: '#87939F', height: 'auto', lineHeight: 19
    },
    forgotLink: {
        width: '100%', paddingTop: 20, textAlign: 'center', fontFamily: fontRegular, color: '#8892a1', fontSize: 16
    }
})
/**
* @method mapStateToProps
* @description return state to component as props
* @param {*} state
*/
function mapStateToProps({ auth }) {
    const { email, error, loading, } = auth;
    return { email, error, loading };
}


/**
 * @method connect
 * @description connect with redux
* @param {function} mapStateToProps
* @param {function} mapDispatchToProps
                        */
export default connect(
    mapStateToProps,
    { forgotPasswordAPI }
)(ForgetPassword);